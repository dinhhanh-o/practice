package PracticeSession2;

import java.util.*;

public class Exercise2 {
    // Tìm tất cả các biến trong biểu thức
    public static Set<Character> extractVariables(String expression) {
        Set<Character> variables = new TreeSet<>();
        for (char c : expression.toCharArray()) {
            if (Character.isLetter(c)) {
                variables.add(c);
            }
        }
        return variables;
    }

    // Thay thế các biến bằng giá trị cụ thể trong biểu thức
    public static String replaceVariables(String expression, Map<Character, Boolean> variableValues) {
        for (Map.Entry<Character, Boolean> entry : variableValues.entrySet()) {
            expression = expression.replace(String.valueOf(entry.getKey()), entry.getValue() ? "1" : "0");
        }
        return expression;
    }

    // Tính giá trị của biểu thức logic
    public static boolean evaluateExpression(String expression) {
        Stack<Character> operators = new Stack<>();
        Stack<Boolean> operands = new Stack<>();
        expression = expression.replace("->", ">").replace("<->", "=");

        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == ' ') continue;

            if (c == '0' || c == '1') {
                operands.push(c == '1');
            } else if (c == '!') {
                operators.push(c);
            } else if (c == '(') {
                operators.push(c);
            } else if (c == ')') {
                while (!operators.isEmpty() && operators.peek() != '(') {
                    char operator = operators.pop();
                    applyOperator(operator, operands);
                }
                operators.pop();
            } else if (c == '&' || c == '|' || c == '>' || c == '=') {
                while (!operators.isEmpty() && precedence(operators.peek()) >= precedence(c)) {
                    char operator = operators.pop();
                    applyOperator(operator, operands);
                }
                operators.push(c);
            }
        }

        while (!operators.isEmpty()) {
            char operator = operators.pop();
            applyOperator(operator, operands);
        }

        return operands.pop();
    }

    // Độ ưu tiên của toán tử
    private static int precedence(char operator) {
        switch (operator) {
            case '!':
                return 3;
            case '&':
                return 2;
            case '|':
                return 1;
            case '>':
                return 0;
            case '=':
                return 0;
            default:
                return -1;
        }
    }

    // Áp dụng toán tử lên các toán hạng
    private static void applyOperator(char operator, Stack<Boolean> operands) {
        if (operator == '!') {
            boolean operand = operands.pop();
            operands.push(!operand);
        } else {
            boolean b = operands.pop();
            boolean a = operands.pop();

            switch (operator) {
                case '&':
                    operands.push(a && b);
                    break;
                case '|':
                    operands.push(a || b);
                    break;
                case '>':
                    operands.push(!a || b);
                    break;
                case '=':
                    operands.push(a == b);
                    break;
            }
        }
    }

    // Tạo bảng chân trị
    public static void generateTruthTable(String expression) {
        Set<Character> variables = extractVariables(expression);
        List<Character> variableList = new ArrayList<>(variables);

        int rows = (int) Math.pow(2, variableList.size());
        System.out.println("Bảng chân trị:");
        for (Character variable : variableList) {
            System.out.print(variable + "\t");
        }
        System.out.println("Kết quả");

        for (int i = 0; i < rows; i++) {
            Map<Character, Boolean> variableValues = new HashMap<>();
            for (int j = 0; j < variableList.size(); j++) {
                boolean value = (i & (1 << (variableList.size() - j - 1))) != 0;
                variableValues.put(variableList.get(j), value);
                System.out.print((value ? "T" : "F") + "\t");
            }
            String replacedExpression = replaceVariables(expression, variableValues);
            boolean result = evaluateExpression(replacedExpression);
            System.out.println(result ? "T" : "F");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Nhập biểu thức logic (ví dụ: (A | !B) & C): ");
        String expression = scanner.nextLine();

        try {
            generateTruthTable(expression);
        } catch (Exception e) {
            System.out.println("Đã xảy ra lỗi: " + e.getMessage());
        }
    }
}


